{"version":3,"sources":["app/todo/services/task.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;YAOA;gBAII,qBAAoB,KAAU;oBAJlC,iBAmDC;oBA/CuB,UAAK,GAAL,KAAK,CAAK;oBAFtB,UAAK,GAAU,EAAE,CAAC;oBAGtB,IAAI,CAAC,gBAAgB,EAAE;yBAClB,SAAS,CAAC,UAAA,KAAK,IAAI,OAAA,KAAI,CAAC,KAAK,GAAG,KAAK,EAAlB,CAAkB,CAAC,CAAC;gBAChD,CAAC;gBAEO,sCAAgB,GAAxB;oBACI,MAAM,CAAC,IAAI,CAAC,KAAK;yBACZ,GAAG,CAAC,8BAA8B,CAAC;yBACnC,EAAE,CAAC,UAAA,QAAQ,IAAI,OAAA,OAAO,CAAC,GAAG,CAAC,cAAc,GAAG,QAAQ,CAAC,IAAI,CAAC,EAA3C,CAA2C,CAAC;yBAC3D,GAAG,CAAC,UAAC,QAAiB,IAAK,OAAQ,QAAQ,CAAC,IAAI,EAAE,CAAC,KAAK,EAA7B,CAA6B,CAAC,CAAC;gBACnE,CAAC;gBAED,8BAAQ,GAAR;oBACI,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC;gBACtB,CAAC;gBAED,6BAAO,GAAP,UAAQ,EAAS;oBACb,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,EAAE,KAAK,EAAE,EAAX,CAAW,CAAC,CAAC,CAAC,CAAC,CAAC;gBAClD,CAAC;gBAED,kCAAY,GAAZ,UAAa,IAAS;oBAClB,EAAE,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC;wBAChB,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;oBACpB,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACJ,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC;oBAC/B,CAAC;gBACL,CAAC;gBAEO,0BAAI,GAAZ,UAAa,OAAY;oBACrB,OAAO,CAAC,EAAE,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC;oBAC3B,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;oBACzB,MAAM,CAAC,OAAO,CAAC;gBACnB,CAAC;gBAEO,4BAAM,GAAd,UAAe,EAAS,EAAE,OAAY;oBAClC,IAAI,IAAI,GAAQ,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;oBACjC,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;oBACzB,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC;oBAC3B,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;oBACzB,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;oBACzB,MAAM,CAAC,IAAI,CAAC;gBAChB,CAAC;gBAEO,4BAAM,GAAd;oBACI,IAAI,GAAG,GAAU,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,UAAC,CAAC,EAAE,CAAC,IAAK,OAAA,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,EAAzB,CAAyB,CAAC,CAAC;oBACxE,MAAM,CAAC,GAAG,GAAG,CAAC,CAAC;gBACnB,CAAC;gBAnDL;oBAAC,iBAAU,EAAE;;+BAAA;gBAoDb,kBAAC;YAAD,CAnDA,AAmDC,IAAA;YAnDD,qCAmDC,CAAA","file":"app/todo/services/task.service.js","sourcesContent":["import {Injectable} from \"@angular/core\";\nimport {Task} from \"../models/task\";\nimport {Http, Response} from \"@angular/http\";\nimport {Observable} from \"rxjs/Observable\";\nimport \"rxjs/Rx\";\n\n@Injectable()\nexport class TaskService {\n\n    private tasks:Task[] = [];\n\n    constructor(private _http:Http) {\n        this.getTasksInternal()\n            .subscribe(tasks => this.tasks = tasks);\n    }\n\n    private getTasksInternal():Observable<Task[]> {\n        return this._http\n            .get(\"./app/todo/models/tasks.json\")\n            .do(response => console.log(\"TaskService \" + response.json))\n            .map((response:Response) => <Task[]>response.json().tasks);\n    }\n\n    getTasks():Task[] {\n        return this.tasks;\n    }\n\n    getTask(id:number):Task {\n        return this.tasks.filter(t => t.id === id)[0];\n    }\n\n    saveOrUpdate(task:Task) {\n        if (task.id === 0) {\n            this.save(task);\n        } else {\n            this.update(task.id, task);\n        }\n    }\n\n    private save(newTask:Task):Task {\n        newTask.id = this.nextId();\n        this.tasks.push(newTask);\n        return newTask;\n    }\n\n    private update(id:number, newTask:Task):Task {\n        let task:Task = this.getTask(id);\n        task.name = newTask.name;\n        task.notes = newTask.notes;\n        task.list = newTask.list;\n        task.done = newTask.done;\n        return task;\n    }\n\n    private nextId():number {\n        let max:number = this.tasks.reduce((p, c) => p.id > c.id ? p.id : c.id);\n        return max + 1;\n    }\n}"],"sourceRoot":"/source/"}